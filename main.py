def adr_com():
    print('a', end='')


def bez_adr_com(x):
    b = {
        '0000': 'NOP | Нет операции',
        '0100': 'HLT | Останов',
        '0200': 'CLA | Очистка аккумулятора',
        '0280': 'NOT | Инверсия аккумулятора',
        '0300': 'CLC | Очистка рег. переноса',
        '0380': 'CMC | Инверсия рег. переноса',
        '0400': 'ROL | Циклический сдвиг влево',
        '0480': 'ROR | Циклический сдвиг вправо',
        '0500': 'ASL | Арифметический сдвиг влево',
        '0580': 'ASR | Арифметический сдвиг вправо',
        '0600': 'SXTB | Расширение знака байта',
        '0680': 'SWAB | Обмен ст. и мл. байтов',
        '0700': 'INC | Инкремент',
        '0740': 'DEC | Декремент',
        '0780': 'NEG | Изменение знака'
    }
    print(b.get(x), end='')


def vet_com(x):
    v = {
        'F0': 'BEQ D | Переход, если равенство',
        'F1': 'BNE D | Переход, если неравенство',
        'F2': 'BMI D | Переход, если минус',
        'F3': 'BPL D | Переход, если плюс',
        'F4': 'BLO/BCS D | Переход, если ниже/перенос',
        'F5': 'BHIS/BCC D | Переход, если выше/нет переноса',
        'F6': 'BVS D | Переход, если переполнение',
        'F7': 'BVC D | Переход, если нет переполнения',
        'F8': 'BLT D | Переход, если меньше',
        'F9': 'BGE D | Переход, если больше или равно',
        'CE': 'BR D | Безусловный переход (эквивалент JUMP D)',
    }
    print(v.get(x[0:2]), end='')


with open('input.txt', 'r', encoding='utf-8') as input:
    for c in input:
        c = c.replace('\n', '')
        print(c, '| ', end='')
        if c[0] == "0":
            bez_adr_com(c)
        elif c[0] == "F" or c[0:2] == "CE":
            vet_com(c)
        elif c[0] == "1":
            print("Команды ввода-вывода не поддерживаются!")
            exit()
        else:
            adr_com()
        print()